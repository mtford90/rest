doctype html
html
  head
    title Siesta.js
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
    meta(name='viewport', content='width=device-width')
    meta(content='Siesta', property='og:title')
    meta(content='An Object Graph for Javascript', name='description')
    script(src='vendor/jquery/dist/jquery.min.js')
    script(src='vendor/flatdoc/legacy.js')
    script(src='vendor/flatdoc/flatdoc.js')
    link(href='vendor/font-awesome/css/font-awesome.css', rel='stylesheet')
    link(href='vendor/bs/bootstrap.css', rel='stylesheet')
    link(href='css/theme.css', rel='stylesheet')
    link(href='css/theme.css', rel='stylesheet')
    link(href='css/main.css', rel='stylesheet')
  body.landing
    include header
    .container.description
      .row
        .col-md-12
          h2
            .span Siesta is an object graph & life cycle management framework. In english - Siesta presents a robust and powerful mechanism for managing your models in the browser.
    .container
      .row
        .col-lg-4.col-md-6
          h3 Expressive
          pre
            code.
              var House = collection.model('House', {
                id: 'houseId',
                attributes: ['address'],
                relationships: {
                  owner: {
                    model: 'User',
                    reverse: 'houses'
                  }
                }
              });
          p.
            Express complex models and the relationships between them.
        .col-lg-4.col-md-6
          h3 Simple
          pre
            code.
              House.graph({
                houseId: 1,
                address:'10 Westminster Drive',
                owner: 10
              }).then(function (house) {
                // ...
              });
          p One function for creating and updating object by mapping arbitrary data onto the object graph.
        .col-lg-4.col-md-6
          h3 Single Source of Truth
          pre
            code.
              User.graph([
                {id: 5, username: 'mike'},
                {id: 5, email: 'mtford@gmail.com')
              ]).then(function (users) {
                console.log(users[0] === users[1]); // True
                house.owner = mike;
                console.log(mike.houses[0] === house); // true
              });
          p One object per resource. Automatically hook up related objects.
        .col-lg-4.col-md-6
          h3 Powerful Queries
          pre
            code.
              // Get all users aged between 20 and 30
              Users
                .query({$or: {age__gte: 20, age__lte: 30}})
                .then(function (users) {
                   // ...
                });f
          p Query your app's object graph in interesting and powerful ways.
        .col-lg-4.col-md-6
          h3 Reactive Programming
          pre
            code.
              Users
                .on('new', function (user) {
                    // Called on user creation
                })
                .query({$or: {age__gte: 20, age__lte: 30}})
                .on('*', function (change) {
                    // Called whenever result set changes
                    // as well as when elements change
                 });
          p React to changes in the object graph.
        .col-lg-4.col-md-6
          h3 Browser Storage
          pre
            code.
              Users
                .graph([
                    {id: 1, username: 'mike'},
                    {id: 2, username: 'bob'}
                 ]).then(function (users) {
                    Users.save();
                 });
          p Backed by PouchDB allowing you to store the object graph in a multitude of browser-storage solutions.
  script(src='js/highlight.js')